import React from "react";
import { Button } from "@/components/ui/button";
import { Check, X, Code, Lightbulb, Zap } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { AiSuggestion, FileData } from "./types";

interface AiSuggestionsProps {
  suggestions: AiSuggestion[];
  editingFile: FileData | null;
  applySuggestion: (suggestion: AiSuggestion) => void;
}

export const AiSuggestions: React.FC<AiSuggestionsProps> = ({
  suggestions,
  editingFile,
  applySuggestion
}) => {
  if (suggestions.length === 0) return null;

  const getIconForType = (type: string) => {
    switch (type.toLowerCase()) {
      case 'fix':
        return <Code size={16} />;
      case 'refactor':
        return <Lightbulb size={16} />;
      case 'optimization':
        return <Zap size={16} />;
      default:
        return <Code size={16} />;
    }
  };

  const getBadgeColorForType = (type: string) => {
    switch (type.toLowerCase()) {
      case 'fix':
        return "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300";
      case 'refactor':
        return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300";
      case 'optimization':
        return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300";
      default:
        return "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300";
    }
  };

  return (
    <div className="space-y-4">
      <h4 className="text-sm font-medium">AI Suggestions ({suggestions.length})</h4>
      
      <div className="space-y-3">
        {suggestions.map((suggestion) => (
          <div 
            key={suggestion.id} 
            className={`border rounded-md p-3 ${suggestion.applied ? 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800' : ''}`}
          >
            <div className="flex items-start justify-between">
              <div className="flex items-center gap-2">
                {getIconForType(suggestion.type)}
                <Badge variant="outline" className={getBadgeColorForType(suggestion.type)}>
                  {suggestion.type.charAt(0).toUpperCase() + suggestion.type.slice(1)}
                </Badge>
                {suggestion.applied && (
                  <Badge variant="outline" className="bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300">
                    Applied
                  </Badge>
                )}
              </div>
              
              {!suggestion.applied && editingFile && (
                <Button 
                  size="sm" 
                  variant="outline"
                  onClick={() => applySuggestion(suggestion)}
                  className="flex items-center gap-1"
                >
                  <Check size={14} />
                  Apply
                </Button>
              )}
            </div>
            
            <p className="text-sm mt-2">{suggestion.description}</p>
            
            {suggestion.codeChange.original && suggestion.codeChange.suggested && (
              <div className="mt-3 space-y-2">
                <div className="bg-red-50 dark:bg-red-900/20 p-2 rounded border border-red-200 dark:border-red-800 relative overflow-x-auto">
                  <div className="absolute top-1 right-1">
                    <Badge variant="outline" className="bg-red-100 text-red-800 text-xs">Remove</Badge>
                  </div>
                  <pre className="text-xs font-mono whitespace-pre-wrap overflow-x-auto p-2">
                    {suggestion.codeChange.original}
                  </pre>
                </div>
                
                <div className="bg-green-50 dark:bg-green-900/20 p-2 rounded border border-green-200 dark:border-green-800 relative overflow-x-auto">
                  <div className="absolute top-1 right-1">
                    <Badge variant="outline" className="bg-green-100 text-green-800 text-xs">Add</Badge>
                  </div>
                  <pre className="text-xs font-mono whitespace-pre-wrap overflow-x-auto p-2">
                    {suggestion.codeChange.suggested}
                  </pre>
                </div>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};
