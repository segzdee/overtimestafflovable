// src/components/TopNav.tsx
import { useState } from "react";
import { User } from "@supabase/supabase-js";
import { 
  Bell, 
  Menu,
  User as UserIcon,
  Settings,
  LogOut,
  MessageSquare 
} from "lucide-react";
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger 
} from "@/components/ui/dropdown-menu";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useAuth } from "@/contexts/auth/AuthContext";
import { Link } from "react-router-dom";

interface TopNavProps {
  onMenuClick: () => void;
  user: User | null;
  profile: any | null;
}

export function TopNav({ onMenuClick, user, profile }: TopNavProps) {
  const { signOut } = useAuth();
  const [hasNotifications] = useState(true);
  
  // Get the appropriate dashboard route based on user role
  const getDashboardRoute = () => {
    if (!profile?.role) return "/dashboard";
    
    switch (profile.role) {
      case "admin":
        return "/dashboard/admin";
      case "agency":
        return "/dashboard/agency";
      case "company":
        return "/dashboard/company";
      case "shift-worker":
        return "/dashboard/shift-worker";
      default:
        return "/dashboard";
    }
  };

  // Get user initials for avatar
  const getUserInitials = () => {
    if (profile?.name) {
      const nameParts = profile.name.split(" ");
      if (nameParts.length >= 2) {
        return `${nameParts[0][0]}${nameParts[1][0]}`.toUpperCase();
      }
      return profile.name[0].toUpperCase();
    }
    if (user?.email) {
      return user.email[0].toUpperCase();
    }
    return "U";
  };

  // Get appropriate settings route
  const getSettingsRoute = () => {
    if (!profile?.role) return "/dashboard/settings";
    
    switch (profile.role) {
      case "admin":
        return "/dashboard/admin/settings";
      case "agency":
        return "/dashboard/agency/settings";
      case "company":
        return "/dashboard/company/settings";
      case "shift-worker":
        return "/dashboard/shift-worker/settings";
      default:
        return "/dashboard/settings";
    }
  };

  // Get appropriate messages route
  const getMessagesRoute = () => {
    if (!profile?.role) return "/dashboard/messages";
    
    switch (profile.role) {
      case "admin":
        return "/dashboard/admin/messages";
      case "agency":
        return "/dashboard/agency/messages";
      case "company":
        return "/dashboard/company/messages";
      case "shift-worker":
        return "/dashboard/shift-worker/messages";
      default:
        return "/dashboard/messages";
    }
  };

  const handleSignOut = async () => {
    await signOut();
  };

  return (
    <div className="h-16 border-b bg-white dark:bg-gray-900 flex items-center justify-between px-4">
      <div className="flex items-center">
        <Button 
          variant="ghost" 
          size="icon"
          onClick={onMenuClick}
          className="md:hidden"
        >
          <Menu className="h-5 w-5" />
        </Button>
        
        <Link to={getDashboardRoute()} className="text-lg font-semibold">
          {profile?.role && (
            <span className="capitalize">{profile.role}</span>
          )} Dashboard
        </Link>
      </div>
      
      <div className="flex items-center gap-4">
        {/* Notifications */}
        <div className="relative">
          <Button variant="ghost" size="icon">
            <Bell className="h-5 w-5" />
            {hasNotifications && (
              <Badge className="absolute top-0 right-0 h-2 w-2 p-0 rounded-full bg-destructive" />
            )}
          </Button>
        </div>
        
        {/* Messages Button - Only visible for non-admin roles */}
        {profile?.role && profile.role !== "admin" && (
          <Link to={getMessagesRoute()}>
            <Button variant="ghost" size="icon">
              <MessageSquare className="h-5 w-5" />
            </Button>
          </Link>
        )}

        {/* User menu */}
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon" className="rounded-full">
              <Avatar className="h-8 w-8">
                <AvatarFallback className="bg-primary text-primary-foreground">
                  {getUserInitials()}
                </AvatarFallback>
              </Avatar>
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>
              {profile?.name || user?.email}
              <p className="text-xs text-muted-foreground mt-1">
                {profile?.role && (
                  <span className="capitalize">{profile.role}</span>
                )}
              </p>
            </DropdownMenuLabel>
            <DropdownMenuSeparator />
            <Link to={profile?.role === "shift-worker" ? "/dashboard/shift-worker/profile" : getSettingsRoute()}>
              <DropdownMenuItem>
                <UserIcon className="mr-2 h-4 w-4" />
                <span>{profile?.role === "shift-worker" ? "Profile" : "Account"}</span>
              </DropdownMenuItem>
            </Link>
            <Link to={getSettingsRoute()}>
              <DropdownMenuItem>
                <Settings className="mr-2 h-4 w-4" />
                <span>Settings</span>
              </DropdownMenuItem>
            </Link>
            <DropdownMenuSeparator />
            <DropdownMenuItem onClick={handleSignOut}>
              <LogOut className="mr-2 h-4 w-4" />
              <span>Sign out</span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </div>
  );
}

export default TopNav;
