
import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useToast } from "@/components/ui/use-toast";
import { Card } from "@/components/ui/card";
import { Shield, CheckCircle, Smartphone, Copy, AlertCircle } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Label } from "@/components/ui/label";
import { cn } from "@/lib/utils";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

interface MFASetupFormProps {
  onSuccess?: () => void;
  onCancel?: () => void;
}

export function MFASetupForm({ onSuccess, onCancel }: MFASetupFormProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [verificationCode, setVerificationCode] = useState("");
  const [isSuccess, setIsSuccess] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [method, setMethod] = useState<"app" | "sms">("app");
  const [phoneNumber, setPhoneNumber] = useState("");
  const { toast } = useToast();

  // In a real implementation, this would be generated by the server
  const mockSecretKey = "JBSWY3DPEHPK3PXP";
  const mockQRCodeURL = "https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=otpauth://totp/OVERTIMESTAFF:user%40example.com?secret=JBSWY3DPEHPK3PXP&issuer=OVERTIMESTAFF";

  const copySecretToClipboard = () => {
    navigator.clipboard.writeText(mockSecretKey);
    toast({
      title: "Secret copied",
      description: "The secret key has been copied to your clipboard.",
    });
  };

  const handleVerify = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);

    try {
      // In a real implementation, this would call the API to verify the code
      // For demo purposes, we'll simulate a verification
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Mock validation - in reality this would be checked on the server
      if (verificationCode === "123456") {
        setIsSuccess(true);
        toast({
          title: "MFA setup complete",
          description: "Multi-factor authentication has been successfully set up.",
        });
        if (onSuccess) onSuccess();
      } else {
        throw new Error("Invalid verification code. Please try again.");
      }
    } catch (error) {
      setError(error instanceof Error ? error.message : "Failed to verify code");
      toast({
        variant: "destructive",
        title: "Verification failed",
        description: error instanceof Error ? error.message : "Failed to verify code",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const sendSMSCode = async () => {
    setIsLoading(true);
    setError(null);

    try {
      // In a real implementation, this would call the API to send the SMS
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      toast({
        title: "SMS code sent",
        description: `A verification code has been sent to ${phoneNumber}`,
      });
    } catch (error) {
      setError(error instanceof Error ? error.message : "Failed to send SMS code");
      toast({
        variant: "destructive",
        title: "Failed to send code",
        description: error instanceof Error ? error.message : "Failed to send SMS code",
      });
    } finally {
      setIsLoading(false);
    }
  };

  if (isSuccess) {
    return (
      <div className="space-y-4 text-center">
        <CheckCircle className="mx-auto h-12 w-12 text-green-500" />
        <h3 className="text-lg font-medium">MFA Setup Complete</h3>
        <p className="text-sm text-gray-600">
          Multi-factor authentication has been successfully enabled for your account.
        </p>
        <Button 
          onClick={onSuccess} 
          className="w-full bg-violet-900 hover:bg-violet-800 text-stone-50"
        >
          Continue
        </Button>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="text-center mb-4">
        <h3 className="text-lg font-medium">Set Up Multi-Factor Authentication</h3>
        <p className="text-sm text-gray-600">
          Add an extra layer of security to your account by enabling MFA.
        </p>
      </div>
      
      {error && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      
      <Tabs defaultValue="app" value={method} onValueChange={(v) => setMethod(v as "app" | "sms")}>
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="app">Authenticator App</TabsTrigger>
          <TabsTrigger value="sms">SMS</TabsTrigger>
        </TabsList>
        
        <TabsContent value="app" className="space-y-4 mt-4">
          <div className="space-y-3">
            <div className="text-sm space-y-2">
              <p>1. Install an authenticator app like Google Authenticator or Authy</p>
              <p>2. Scan the QR code or enter the secret key manually</p>
              <p>3. Enter the 6-digit verification code from the app</p>
            </div>
            
            <div className="flex justify-center my-4">
              <img 
                src={mockQRCodeURL} 
                alt="QR Code" 
                className="h-40 w-40 border rounded"
              />
            </div>
            
            <div className="flex items-center justify-between bg-gray-50 p-3 rounded-md">
              <code className="text-xs font-mono break-all">{mockSecretKey}</code>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={copySecretToClipboard}
                className="ml-2"
              >
                <Copy className="h-4 w-4" />
              </Button>
            </div>
          </div>
          
          <form onSubmit={handleVerify} className="space-y-4">
            <div>
              <Label htmlFor="verification-code">
                Verification Code
              </Label>
              <Input
                id="verification-code"
                type="text"
                value={verificationCode}
                onChange={(e) => setVerificationCode(e.target.value)}
                placeholder="Enter 6-digit code"
                disabled={isLoading}
                minLength={6}
                maxLength={6}
                required
                className="mt-1"
              />
            </div>
            
            <div className="flex flex-col gap-3">
              <Button
                type="submit"
                disabled={isLoading}
                className="w-full bg-violet-900 hover:bg-violet-800 text-stone-50"
              >
                {isLoading ? "Verifying..." : "Verify and Enable"}
              </Button>
              
              {onCancel && (
                <Button
                  type="button"
                  variant="outline"
                  disabled={isLoading}
                  onClick={onCancel}
                >
                  Cancel
                </Button>
              )}
            </div>
          </form>
        </TabsContent>
        
        <TabsContent value="sms" className="space-y-4 mt-4">
          <form onSubmit={handleVerify} className="space-y-4">
            <div>
              <Label htmlFor="phone-number">
                Phone Number
              </Label>
              <Input
                id="phone-number"
                type="tel"
                value={phoneNumber}
                onChange={(e) => setPhoneNumber(e.target.value)}
                placeholder="Enter phone number"
                disabled={isLoading}
                required
                className="mt-1"
              />
              <Button
                type="button"
                onClick={sendSMSCode}
                disabled={isLoading || !phoneNumber}
                variant="outline"
                className="mt-2 w-full"
              >
                Send Verification Code
              </Button>
            </div>
            
            <div>
              <Label htmlFor="sms-verification-code">
                Verification Code
              </Label>
              <Input
                id="sms-verification-code"
                type="text"
                value={verificationCode}
                onChange={(e) => setVerificationCode(e.target.value)}
                placeholder="Enter 6-digit code"
                disabled={isLoading}
                minLength={6}
                maxLength={6}
                required
                className="mt-1"
              />
            </div>
            
            <div className="flex flex-col gap-3">
              <Button
                type="submit"
                disabled={isLoading}
                className="w-full bg-violet-900 hover:bg-violet-800 text-stone-50"
              >
                {isLoading ? "Verifying..." : "Verify and Enable"}
              </Button>
              
              {onCancel && (
                <Button
                  type="button"
                  variant="outline"
                  disabled={isLoading}
                  onClick={onCancel}
                >
                  Cancel
                </Button>
              )}
            </div>
          </form>
        </TabsContent>
      </Tabs>
    </div>
  );
}
